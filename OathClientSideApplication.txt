******************************************************************************************************************************************************************************
******************************************************************************************************************************************************************************
******************************************************************************************************************************************************************************

OATH2
*****

Authorization grant
-------------------
The authorization grant is a credential representing the resource owner's authorization that can be used to access a protected resource. This credential is used by the client to obtain an access token. The access token is eventually sent along with the request to access a protected resource. 

OAuth 2.0 defines four grant types:
- Authorization code
- Implicit
- Resource owner password credentials
- Client credentials

Below we are using the Authorization Grant: Authorization Code


******************************************************************************************************************************************************************************
******************************************************************************************************************************************************************************
******************************************************************************************************************************************************************************


-----  URL to get the Access Token  -----
https://accounts.google.com/o/oauth2/v2/auth?response_type=token&client_id=899377700198-4o708rg7ddptckrsdmq3bfuduvuckjj7.apps.googleusercontent.com&scope=https://www.googleapis.com/auth/gmail.readonly&redirect_uri=http%3A%2F%2Flocalhost:8080/wwwhttp/oauthcallback/index.html
-------------------------------------------

---- URL to validate the Access Token -----
https://www.googleapis.com/oauth2/v3/tokeninfo?access_token=ya29.ElqRBFixMWy3w5Eeuz3Mubu7U7Mc9h_8_yPX8DxNFI4HA8Rz3_OHz1ZttYmyzhJ0odcZR-3BWUgkwqMUdKAf3uoMGwobOwL9QvgnwmsqqrZDCB7pMT3DWvmQ290
-------------------------------------------

---- GMAIL API -----
https://www.googleapis.com/gmail/v1/users/ualter.junior@gmail.com/messages/?access_token=ya29.ElqRBFixMWy3w5Eeuz3Mubu7U7Mc9h_8_yPX8DxNFI4HA8Rz3_OHz1ZttYmyzhJ0odcZR-3BWUgkwqMUdKAf3uoMGwobOwL9QvgnwmsqqrZDCB7pMT3DWvmQ290
-------------------------------------------

----- oauthcallback/index.html ------
<script type="text/javascript">
// First, parse the query string
var params = {}, queryString = location.hash.substring(1),
    regex = /([^&=]+)=([^&]*)/g, m;
	
console.log(queryString);
while (m = regex.exec(queryString)) {
  params[decodeURIComponent(m[1])] = decodeURIComponent(m[2]);
}

// Verify that the nonce in the response is the same as the one you sent in the
// request.
if (params['nonce'] !== nonce) {
  alert('Invalid nonce.')
} else {
  // And send the token over to the server
  var req = new XMLHttpRequest();
  // consider using POST so query isn't logged
  req.open('GET', 'https://' + window.location.host + '/catchtoken?' + queryString, true);
  req.onreadystatechange = function (e) {
    if (req.readyState == 4) {
      if (req.status == 200) {
        window.location = params['state']
      } else if (req.status == 400) {
        alert('There was an error processing the token.')
      } else {
        alert('something else other than 200 was returned')
      }
    }
  };
  req.send(null);
}
</script text>
<script type="text/javascript">
document.write(new Date() + "<BR>" + location.hash.substring(1));
</script>
-------------------------
